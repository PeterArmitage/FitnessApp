// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FoodEntry {
  id       String   @id @default(cuid())
  userId   String
  name     String
  calories Int
  meal     String
  date     DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  sleepEntries  SleepEntry[]
  foodEntries   FoodEntry[]
  settings      UserSettings?
  UserFood      UserFood[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SleepEntry {
  id            String   @id @default(cuid())
  userId        String
  date          DateTime
  sleepDuration Float
  mood          String
  comment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model UserSettings {
  id     String @id @default(cuid())
  userId String @unique
  units  String @default("metric")
  user   User   @relation(fields: [userId], references: [id])
}

model UserFood {
  id         String   @id @default(uuid())
  userId     String
  name       String
  calories   Int
  weight     Float?
  weightUnit String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User     @relation(fields: [userId], references: [id])

  @@unique([userId, name])
}
